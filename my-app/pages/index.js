import Head from 'next/head'
import { useState,useRef, useEffect } from 'react'
import Web3Modal from "web3modal"
import {Contract,providers,utils} from "ethers"
import styles from '../styles/Home.module.css'
import {CONTRACT_ADDRESS,CONTRACT_ABI} from "../constants";


export default function Home() {
  //connect wallet
  const [isWalletConnected,setIsWalletConnected] = useState(false);
  //loading state
  const [loading,setLoading] = useState(false);
  //storing the token count
  const [tokensMinted,setTokensMinted] = useState("0");
  //create web3Modal reference
 const web3ModalRef = useRef();

 //connect wallet function
 const connectWallet = async()=>{
   try{
       await getSignerOrProvider();
       setIsWalletConnected(true);
   }
   catch(error){
     console.log(error);
   }
 }

 // calling the mint function through a m function

 async function  callMint(){
   const signer = await getSignerOrProvider(true);
   const LW3Contract = new Contract(CONTRACT_ADDRESS,CONTRACT_ABI,signer);
   const tx = await LW3Contract.mint({
     value:utils.parseEther("0.01")
   });
   setLoading(true);
   await tx.wait();
   await getNumberOfTokensMinted();   
   setLoading(false);
   return;
 }

 async function getNumberOfTokensMinted(){
  const provider = await getSignerOrProvider();
  const LW3Contract = new Contract(CONTRACT_ADDRESS,CONTRACT_ABI,provider);
  const _tokensMinted = await LW3Contract.totalSupply();
  setTokensMinted(_tokensMinted.toString());
  return;
 }


  //getprovider or signer function 
  async function getSignerOrProvider(signer=false){
   const provider = await web3ModalRef.current.connect();
   const web3Provider = new providers.Web3Provider(provider);
    
   const {chainId} = await web3Provider.getNetwork();
   if(chainId!==80001){
     window.alert("connect to mumbai test network");
     return;
   }
   if(signer){
     return web3Provider.getSigner();
   }
   return web3Provider;
 }



 useEffect(()=>{
   try{
     if(!isWalletConnected){
       web3ModalRef.current  = new Web3Modal({
         network:"mumbai",
         providerOptions:{},
         disableInjectedProvider:false
       });       
       connectWallet();
     }
   }
   catch(error){
     console.log(error);
   }
 },[]);


 const renderButton= ()=>{
   if(!isWalletConnected){
     return (<button className={styles.button} onClick={connectWallet}>connect wallet</button>)
   }

   if(loading){
      return (<div className={styles.description}>Loading....</div>);
   }

   return (
     <button className={styles.button} onClick={callMint}> Public Mint ðŸš€</button>
   )
 }


 
  return (
    <div className={styles.container}>
      <Head>
        <title>IPFS TUTORIAL</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>   
      <div className={styles.main}>
            <div>
              <h1 className={styles.title}>Welcome to LW3Punks!</h1>
              <div className={styles.description}>
                Its an NFT collection for LearnWeb3 students.
              </div>
              <div className={styles.description}>
                {tokensMinted}/10 have been minted
              </div>
              {renderButton()}
            </div>
            <div>
              <img className={styles.image} src="./LW3punks/1.png" />
            </div>
          </div>

          <footer className={styles.footer}>Made with &#10084; by LW3Punks</footer> 
    </div>
  )
}
